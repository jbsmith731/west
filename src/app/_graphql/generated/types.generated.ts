// DO NOT EDIT
        // This file is automatically generated, run yarn gen to update
                
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Date: { input: any; output: any; }
  DateTime: { input: any; output: any; }
  Hex: { input: any; output: any; }
  Json: { input: any; output: any; }
  Long: { input: any; output: any; }
  RGBAHue: { input: any; output: any; }
  RGBATransparency: { input: any; output: any; }
  RichTextAST: { input: any; output: any; }
};

export type Aggregate = {
  count: Scalars['Int']['output'];
};

/** Asset system model */
export type Asset = Node & {
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Asset>;
  /** The file name */
  fileName: Scalars['String']['output'];
  /** The file handle */
  handle: Scalars['String']['output'];
  /** The height of the file */
  height: Maybe<Scalars['Float']['output']>;
  /** List of Asset versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Asset>;
  /** The mime type of the file */
  mimeType: Maybe<Scalars['String']['output']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** The file size */
  size: Maybe<Scalars['Float']['output']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy: Maybe<User>;
  /** Get the url for the asset with provided transformations applied. */
  url: Scalars['String']['output'];
  /** The file width */
  width: Maybe<Scalars['Float']['output']>;
};


/** Asset system model */
export type AssetCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetCreatedByArgs = {
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  locales: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


/** Asset system model */
export type AssetHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride: InputMaybe<Stage>;
};


/** Asset system model */
export type AssetLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  locales?: Array<Locale>;
};


/** Asset system model */
export type AssetPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetPublishedByArgs = {
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  locales: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetScheduledInArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales: InputMaybe<Array<Locale>>;
  skip: InputMaybe<Scalars['Int']['input']>;
  where: InputMaybe<ScheduledOperationWhereInput>;
};


/** Asset system model */
export type AssetUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetUpdatedByArgs = {
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  locales: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetUrlArgs = {
  transformation: InputMaybe<AssetTransformationInput>;
};

export type AssetConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AssetWhereUniqueInput;
};

/** A connection to a list of items. */
export type AssetConnection = {
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AssetEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AssetCreateInput = {
  createdAt: InputMaybe<Scalars['DateTime']['input']>;
  fileName: Scalars['String']['input'];
  handle: Scalars['String']['input'];
  height: InputMaybe<Scalars['Float']['input']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations: InputMaybe<AssetCreateLocalizationsInput>;
  mimeType: InputMaybe<Scalars['String']['input']>;
  size: InputMaybe<Scalars['Float']['input']>;
  updatedAt: InputMaybe<Scalars['DateTime']['input']>;
  width: InputMaybe<Scalars['Float']['input']>;
};

export type AssetCreateLocalizationDataInput = {
  createdAt: InputMaybe<Scalars['DateTime']['input']>;
  fileName: Scalars['String']['input'];
  handle: Scalars['String']['input'];
  height: InputMaybe<Scalars['Float']['input']>;
  mimeType: InputMaybe<Scalars['String']['input']>;
  size: InputMaybe<Scalars['Float']['input']>;
  updatedAt: InputMaybe<Scalars['DateTime']['input']>;
  width: InputMaybe<Scalars['Float']['input']>;
};

export type AssetCreateLocalizationInput = {
  /** Localization input */
  data: AssetCreateLocalizationDataInput;
  locale: Locale;
};

export type AssetCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create: InputMaybe<Array<AssetCreateLocalizationInput>>;
};

export type AssetCreateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Create and connect multiple existing Asset documents */
  create: InputMaybe<Array<AssetCreateInput>>;
};

export type AssetCreateOneInlineInput = {
  /** Connect one existing Asset document */
  connect: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create: InputMaybe<AssetCreateInput>;
};

/** An edge in a connection. */
export type AssetEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Asset;
};

/** Identifies documents */
export type AssetManyWhereInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search: InputMaybe<Scalars['String']['input']>;
  createdAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy: InputMaybe<UserWhereInput>;
  documentInStages_every: InputMaybe<AssetWhereStageInput>;
  documentInStages_none: InputMaybe<AssetWhereStageInput>;
  documentInStages_some: InputMaybe<AssetWhereStageInput>;
  id: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with: InputMaybe<Scalars['ID']['input']>;
  publishedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy: InputMaybe<UserWhereInput>;
  scheduledIn_every: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy: InputMaybe<UserWhereInput>;
};

export enum AssetOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FileNameAsc = 'fileName_ASC',
  FileNameDesc = 'fileName_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  HeightAsc = 'height_ASC',
  HeightDesc = 'height_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MimeTypeAsc = 'mimeType_ASC',
  MimeTypeDesc = 'mimeType_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WidthAsc = 'width_ASC',
  WidthDesc = 'width_DESC'
}

/** Transformations for Assets */
export type AssetTransformationInput = {
  document: InputMaybe<DocumentTransformationInput>;
  image: InputMaybe<ImageTransformationInput>;
  /** Pass true if you want to validate the passed transformation parameters */
  validateOptions: InputMaybe<Scalars['Boolean']['input']>;
};

export type AssetUpdateInput = {
  fileName: InputMaybe<Scalars['String']['input']>;
  handle: InputMaybe<Scalars['String']['input']>;
  height: InputMaybe<Scalars['Float']['input']>;
  /** Manage document localizations */
  localizations: InputMaybe<AssetUpdateLocalizationsInput>;
  mimeType: InputMaybe<Scalars['String']['input']>;
  size: InputMaybe<Scalars['Float']['input']>;
  width: InputMaybe<Scalars['Float']['input']>;
};

export type AssetUpdateLocalizationDataInput = {
  fileName: InputMaybe<Scalars['String']['input']>;
  handle: InputMaybe<Scalars['String']['input']>;
  height: InputMaybe<Scalars['Float']['input']>;
  mimeType: InputMaybe<Scalars['String']['input']>;
  size: InputMaybe<Scalars['Float']['input']>;
  width: InputMaybe<Scalars['Float']['input']>;
};

export type AssetUpdateLocalizationInput = {
  data: AssetUpdateLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateLocalizationsInput = {
  /** Localizations to create */
  create: InputMaybe<Array<AssetCreateLocalizationInput>>;
  /** Localizations to delete */
  delete: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update: InputMaybe<Array<AssetUpdateLocalizationInput>>;
  upsert: InputMaybe<Array<AssetUpsertLocalizationInput>>;
};

export type AssetUpdateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect: InputMaybe<Array<AssetConnectInput>>;
  /** Create and connect multiple Asset documents */
  create: InputMaybe<Array<AssetCreateInput>>;
  /** Delete multiple Asset documents */
  delete: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Disconnect multiple Asset documents */
  disconnect: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Asset documents */
  set: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Update multiple Asset documents */
  update: InputMaybe<Array<AssetUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Asset documents */
  upsert: InputMaybe<Array<AssetUpsertWithNestedWhereUniqueInput>>;
};

export type AssetUpdateManyInput = {
  fileName: InputMaybe<Scalars['String']['input']>;
  height: InputMaybe<Scalars['Float']['input']>;
  /** Optional updates to localizations */
  localizations: InputMaybe<AssetUpdateManyLocalizationsInput>;
  mimeType: InputMaybe<Scalars['String']['input']>;
  size: InputMaybe<Scalars['Float']['input']>;
  width: InputMaybe<Scalars['Float']['input']>;
};

export type AssetUpdateManyLocalizationDataInput = {
  fileName: InputMaybe<Scalars['String']['input']>;
  height: InputMaybe<Scalars['Float']['input']>;
  mimeType: InputMaybe<Scalars['String']['input']>;
  size: InputMaybe<Scalars['Float']['input']>;
  width: InputMaybe<Scalars['Float']['input']>;
};

export type AssetUpdateManyLocalizationInput = {
  data: AssetUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update: InputMaybe<Array<AssetUpdateManyLocalizationInput>>;
};

export type AssetUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AssetUpdateManyInput;
  /** Document search */
  where: AssetWhereInput;
};

export type AssetUpdateOneInlineInput = {
  /** Connect existing Asset document */
  connect: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create: InputMaybe<AssetCreateInput>;
  /** Delete currently connected Asset document */
  delete: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Asset document */
  disconnect: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Asset document */
  update: InputMaybe<AssetUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Asset document */
  upsert: InputMaybe<AssetUpsertWithNestedWhereUniqueInput>;
};

export type AssetUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AssetUpdateInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

export type AssetUpsertInput = {
  /** Create document if it didn't exist */
  create: AssetCreateInput;
  /** Update document if it exists */
  update: AssetUpdateInput;
};

export type AssetUpsertLocalizationInput = {
  create: AssetCreateLocalizationDataInput;
  locale: Locale;
  update: AssetUpdateLocalizationDataInput;
};

export type AssetUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AssetUpsertInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type AssetWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type AssetWhereInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search: InputMaybe<Scalars['String']['input']>;
  createdAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy: InputMaybe<UserWhereInput>;
  documentInStages_every: InputMaybe<AssetWhereStageInput>;
  documentInStages_none: InputMaybe<AssetWhereStageInput>;
  documentInStages_some: InputMaybe<AssetWhereStageInput>;
  fileName: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  fileName_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  fileName_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  fileName_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  fileName_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  fileName_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  fileName_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  fileName_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  fileName_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  fileName_starts_with: InputMaybe<Scalars['String']['input']>;
  handle: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  handle_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  handle_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  handle_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  handle_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  handle_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  handle_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  handle_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  handle_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  handle_starts_with: InputMaybe<Scalars['String']['input']>;
  height: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than the given value. */
  height_gt: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than or equal the given value. */
  height_gte: InputMaybe<Scalars['Float']['input']>;
  /** All values that are contained in given list. */
  height_in: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  /** All values less than the given value. */
  height_lt: InputMaybe<Scalars['Float']['input']>;
  /** All values less than or equal the given value. */
  height_lte: InputMaybe<Scalars['Float']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  height_not: InputMaybe<Scalars['Float']['input']>;
  /** All values that are not contained in given list. */
  height_not_in: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  id: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with: InputMaybe<Scalars['ID']['input']>;
  mimeType: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  mimeType_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  mimeType_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  mimeType_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  mimeType_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  mimeType_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  mimeType_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  mimeType_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  mimeType_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  mimeType_starts_with: InputMaybe<Scalars['String']['input']>;
  publishedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy: InputMaybe<UserWhereInput>;
  scheduledIn_every: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some: InputMaybe<ScheduledOperationWhereInput>;
  size: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than the given value. */
  size_gt: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than or equal the given value. */
  size_gte: InputMaybe<Scalars['Float']['input']>;
  /** All values that are contained in given list. */
  size_in: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  /** All values less than the given value. */
  size_lt: InputMaybe<Scalars['Float']['input']>;
  /** All values less than or equal the given value. */
  size_lte: InputMaybe<Scalars['Float']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  size_not: InputMaybe<Scalars['Float']['input']>;
  /** All values that are not contained in given list. */
  size_not_in: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  updatedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy: InputMaybe<UserWhereInput>;
  width: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than the given value. */
  width_gt: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than or equal the given value. */
  width_gte: InputMaybe<Scalars['Float']['input']>;
  /** All values that are contained in given list. */
  width_in: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  /** All values less than the given value. */
  width_lt: InputMaybe<Scalars['Float']['input']>;
  /** All values less than or equal the given value. */
  width_lte: InputMaybe<Scalars['Float']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  width_not: InputMaybe<Scalars['Float']['input']>;
  /** All values that are not contained in given list. */
  width_not_in: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type AssetWhereStageInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<AssetWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent: InputMaybe<AssetWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage: InputMaybe<Stage>;
};

/** References Asset record uniquely */
export type AssetWhereUniqueInput = {
  id: InputMaybe<Scalars['ID']['input']>;
};

export type BatchPayload = {
  /** The number of nodes that have been affected by the Batch operation. */
  count: Scalars['Long']['output'];
};

/** Representing a color value comprising of HEX, RGBA and css color values */
export type Color = {
  css: Scalars['String']['output'];
  hex: Scalars['Hex']['output'];
  rgba: Rgba;
};

/** Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used. */
export type ColorInput = {
  hex: InputMaybe<Scalars['Hex']['input']>;
  rgba: InputMaybe<RgbaInput>;
};

export type ConnectPositionInput = {
  /** Connect document after specified document */
  after: InputMaybe<Scalars['ID']['input']>;
  /** Connect document before specified document */
  before: InputMaybe<Scalars['ID']['input']>;
  /** Connect document at last position */
  end: InputMaybe<Scalars['Boolean']['input']>;
  /** Connect document at first position */
  start: InputMaybe<Scalars['Boolean']['input']>;
};

export enum DocumentFileTypes {
  Doc = 'doc',
  Docx = 'docx',
  Html = 'html',
  Jpg = 'jpg',
  Odp = 'odp',
  Ods = 'ods',
  Odt = 'odt',
  Pdf = 'pdf',
  Png = 'png',
  Ppt = 'ppt',
  Pptx = 'pptx',
  Svg = 'svg',
  Txt = 'txt',
  Webp = 'webp',
  Xls = 'xls',
  Xlsx = 'xlsx'
}

export type DocumentOutputInput = {
  /**
   * Transforms a document into a desired file type.
   * See this matrix for format support:
   *
   * PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
   * DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
   * DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
   * ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
   * XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
   * XLSX:	jpg, pdf, ods, png, svg, xls, and webp
   * ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
   * PPT:	jpg, odp, pdf, png, svg, pptx, and webp
   * PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
   * ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
   * BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
   * PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * SVG:	jpg, odp, ods, odt, pdf, png, and webp
   * HTML:	jpg, odt, pdf, svg, txt, and webp
   * TXT:	jpg, html, odt, pdf, svg, and webp
   */
  format: InputMaybe<DocumentFileTypes>;
};

/** Transformations for Documents */
export type DocumentTransformationInput = {
  /** Changes the output for the file. */
  output: InputMaybe<DocumentOutputInput>;
};

export type DocumentVersion = {
  createdAt: Scalars['DateTime']['output'];
  data: Maybe<Scalars['Json']['output']>;
  id: Scalars['ID']['output'];
  revision: Scalars['Int']['output'];
  stage: Stage;
};

export type Experience = {
  date: Maybe<Scalars['String']['output']>;
  description: Maybe<RichText>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  location: Maybe<Scalars['String']['output']>;
  position: Maybe<Scalars['String']['output']>;
  responsibilities: Array<Scalars['String']['output']>;
  software: Array<Scalars['String']['output']>;
  /** System stage field */
  stage: Stage;
  title: Scalars['String']['output'];
};

export type ExperienceConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ExperienceWhereUniqueInput;
};

/** A connection to a list of items. */
export type ExperienceConnection = {
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ExperienceEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ExperienceCreateInput = {
  date: InputMaybe<Scalars['String']['input']>;
  description: InputMaybe<Scalars['RichTextAST']['input']>;
  location: InputMaybe<Scalars['String']['input']>;
  position: InputMaybe<Scalars['String']['input']>;
  responsibilities: InputMaybe<Array<Scalars['String']['input']>>;
  software: InputMaybe<Array<Scalars['String']['input']>>;
  title: Scalars['String']['input'];
};

export type ExperienceCreateManyInlineInput = {
  /** Create and connect multiple existing Experience documents */
  create: InputMaybe<Array<ExperienceCreateInput>>;
};

export type ExperienceCreateOneInlineInput = {
  /** Create and connect one Experience document */
  create: InputMaybe<ExperienceCreateInput>;
};

export type ExperienceCreateWithPositionInput = {
  /** Document to create */
  data: ExperienceCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ExperienceEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Experience;
};

/** Identifies documents */
export type ExperienceManyWhereInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<ExperienceWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<ExperienceWhereInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<ExperienceWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search: InputMaybe<Scalars['String']['input']>;
  date: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  date_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  date_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  date_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  date_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  date_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  date_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  date_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  date_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  date_starts_with: InputMaybe<Scalars['String']['input']>;
  id: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with: InputMaybe<Scalars['ID']['input']>;
  location: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  location_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  location_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  location_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  location_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  location_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  location_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  location_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  location_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  location_starts_with: InputMaybe<Scalars['String']['input']>;
  position: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  position_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  position_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  position_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  position_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  position_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  position_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  position_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  position_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  position_starts_with: InputMaybe<Scalars['String']['input']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  responsibilities: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  responsibilities_contains_all: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  responsibilities_contains_none: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  responsibilities_contains_some: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  responsibilities_not: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  software: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  software_contains_all: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  software_contains_none: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  software_contains_some: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  software_not: InputMaybe<Array<Scalars['String']['input']>>;
  title: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with: InputMaybe<Scalars['String']['input']>;
};

export enum ExperienceOrderByInput {
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LocationAsc = 'location_ASC',
  LocationDesc = 'location_DESC',
  PositionAsc = 'position_ASC',
  PositionDesc = 'position_DESC',
  ResponsibilitiesAsc = 'responsibilities_ASC',
  ResponsibilitiesDesc = 'responsibilities_DESC',
  SoftwareAsc = 'software_ASC',
  SoftwareDesc = 'software_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type ExperienceParent = PageHome;

export type ExperienceParentConnectInput = {
  PageHome: InputMaybe<PageHomeConnectInput>;
};

export type ExperienceParentCreateInput = {
  PageHome: InputMaybe<PageHomeCreateInput>;
};

export type ExperienceParentCreateManyInlineInput = {
  /** Connect multiple existing ExperienceParent documents */
  connect: InputMaybe<Array<ExperienceParentWhereUniqueInput>>;
  /** Create and connect multiple existing ExperienceParent documents */
  create: InputMaybe<Array<ExperienceParentCreateInput>>;
};

export type ExperienceParentCreateOneInlineInput = {
  /** Connect one existing ExperienceParent document */
  connect: InputMaybe<ExperienceParentWhereUniqueInput>;
  /** Create and connect one ExperienceParent document */
  create: InputMaybe<ExperienceParentCreateInput>;
};

export type ExperienceParentUpdateInput = {
  PageHome: InputMaybe<PageHomeUpdateInput>;
};

export type ExperienceParentUpdateManyInlineInput = {
  /** Connect multiple existing ExperienceParent documents */
  connect: InputMaybe<Array<ExperienceParentConnectInput>>;
  /** Create and connect multiple ExperienceParent documents */
  create: InputMaybe<Array<ExperienceParentCreateInput>>;
  /** Delete multiple ExperienceParent documents */
  delete: InputMaybe<Array<ExperienceParentWhereUniqueInput>>;
  /** Disconnect multiple ExperienceParent documents */
  disconnect: InputMaybe<Array<ExperienceParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ExperienceParent documents */
  set: InputMaybe<Array<ExperienceParentWhereUniqueInput>>;
  /** Update multiple ExperienceParent documents */
  update: InputMaybe<Array<ExperienceParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ExperienceParent documents */
  upsert: InputMaybe<Array<ExperienceParentUpsertWithNestedWhereUniqueInput>>;
};

export type ExperienceParentUpdateManyWithNestedWhereInput = {
  PageHome: InputMaybe<PageHomeUpdateManyWithNestedWhereInput>;
};

export type ExperienceParentUpdateOneInlineInput = {
  /** Connect existing ExperienceParent document */
  connect: InputMaybe<ExperienceParentWhereUniqueInput>;
  /** Create and connect one ExperienceParent document */
  create: InputMaybe<ExperienceParentCreateInput>;
  /** Delete currently connected ExperienceParent document */
  delete: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected ExperienceParent document */
  disconnect: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single ExperienceParent document */
  update: InputMaybe<ExperienceParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ExperienceParent document */
  upsert: InputMaybe<ExperienceParentUpsertWithNestedWhereUniqueInput>;
};

export type ExperienceParentUpdateWithNestedWhereUniqueInput = {
  PageHome: InputMaybe<PageHomeUpdateWithNestedWhereUniqueInput>;
};

export type ExperienceParentUpsertWithNestedWhereUniqueInput = {
  PageHome: InputMaybe<PageHomeUpsertWithNestedWhereUniqueInput>;
};

export type ExperienceParentWhereInput = {
  PageHome: InputMaybe<PageHomeWhereInput>;
};

export type ExperienceParentWhereUniqueInput = {
  PageHome: InputMaybe<PageHomeWhereUniqueInput>;
};

export type ExperienceUpdateInput = {
  date: InputMaybe<Scalars['String']['input']>;
  description: InputMaybe<Scalars['RichTextAST']['input']>;
  location: InputMaybe<Scalars['String']['input']>;
  position: InputMaybe<Scalars['String']['input']>;
  responsibilities: InputMaybe<Array<Scalars['String']['input']>>;
  software: InputMaybe<Array<Scalars['String']['input']>>;
  title: InputMaybe<Scalars['String']['input']>;
};

export type ExperienceUpdateManyInlineInput = {
  /** Create and connect multiple Experience component instances */
  create: InputMaybe<Array<ExperienceCreateWithPositionInput>>;
  /** Delete multiple Experience documents */
  delete: InputMaybe<Array<ExperienceWhereUniqueInput>>;
  /** Update multiple Experience component instances */
  update: InputMaybe<Array<ExperienceUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Experience component instances */
  upsert: InputMaybe<Array<ExperienceUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ExperienceUpdateManyInput = {
  date: InputMaybe<Scalars['String']['input']>;
  description: InputMaybe<Scalars['RichTextAST']['input']>;
  location: InputMaybe<Scalars['String']['input']>;
  position: InputMaybe<Scalars['String']['input']>;
  responsibilities: InputMaybe<Array<Scalars['String']['input']>>;
  software: InputMaybe<Array<Scalars['String']['input']>>;
  title: InputMaybe<Scalars['String']['input']>;
};

export type ExperienceUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ExperienceUpdateManyInput;
  /** Document search */
  where: ExperienceWhereInput;
};

export type ExperienceUpdateOneInlineInput = {
  /** Create and connect one Experience document */
  create: InputMaybe<ExperienceCreateInput>;
  /** Delete currently connected Experience document */
  delete: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Experience document */
  update: InputMaybe<ExperienceUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Experience document */
  upsert: InputMaybe<ExperienceUpsertWithNestedWhereUniqueInput>;
};

export type ExperienceUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data: InputMaybe<ExperienceUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ExperienceWhereUniqueInput;
};

export type ExperienceUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ExperienceUpdateInput;
  /** Unique document search */
  where: ExperienceWhereUniqueInput;
};

export type ExperienceUpsertInput = {
  /** Create document if it didn't exist */
  create: ExperienceCreateInput;
  /** Update document if it exists */
  update: ExperienceUpdateInput;
};

export type ExperienceUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data: InputMaybe<ExperienceUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ExperienceWhereUniqueInput;
};

export type ExperienceUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ExperienceUpsertInput;
  /** Unique document search */
  where: ExperienceWhereUniqueInput;
};

/** Identifies documents */
export type ExperienceWhereInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<ExperienceWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<ExperienceWhereInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<ExperienceWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search: InputMaybe<Scalars['String']['input']>;
  date: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  date_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  date_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  date_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  date_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  date_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  date_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  date_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  date_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  date_starts_with: InputMaybe<Scalars['String']['input']>;
  id: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with: InputMaybe<Scalars['ID']['input']>;
  location: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  location_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  location_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  location_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  location_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  location_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  location_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  location_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  location_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  location_starts_with: InputMaybe<Scalars['String']['input']>;
  position: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  position_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  position_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  position_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  position_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  position_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  position_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  position_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  position_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  position_starts_with: InputMaybe<Scalars['String']['input']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  responsibilities: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  responsibilities_contains_all: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  responsibilities_contains_none: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  responsibilities_contains_some: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  responsibilities_not: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  software: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  software_contains_all: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  software_contains_none: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  software_contains_some: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  software_not: InputMaybe<Array<Scalars['String']['input']>>;
  title: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with: InputMaybe<Scalars['String']['input']>;
};

/** References Experience record uniquely */
export type ExperienceWhereUniqueInput = {
  id: InputMaybe<Scalars['ID']['input']>;
};

export enum ImageFit {
  /** Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio. */
  Clip = 'clip',
  /** Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries. */
  Crop = 'crop',
  /** Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size. */
  Max = 'max',
  /** Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method. */
  Scale = 'scale'
}

export type ImageResizeInput = {
  /** The default value for the fit parameter is fit:clip. */
  fit: InputMaybe<ImageFit>;
  /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  height: InputMaybe<Scalars['Int']['input']>;
  /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  width: InputMaybe<Scalars['Int']['input']>;
};

/** Transformations for Images */
export type ImageTransformationInput = {
  /** Resizes the image */
  resize: InputMaybe<ImageResizeInput>;
};

/** Locale system enumeration */
export enum Locale {
  /** System locale */
  En = 'en'
}

/** Representing a geolocation point with latitude and longitude */
export type Location = {
  distance: Scalars['Float']['output'];
  latitude: Scalars['Float']['output'];
  longitude: Scalars['Float']['output'];
};


/** Representing a geolocation point with latitude and longitude */
export type LocationDistanceArgs = {
  from: LocationInput;
};

/** Input for a geolocation point with latitude and longitude */
export type LocationInput = {
  latitude: Scalars['Float']['input'];
  longitude: Scalars['Float']['input'];
};

export type Mutation = {
  /**
   * Create one asset
   * @deprecated Asset mutations will be overhauled soon
   */
  createAsset: Maybe<Asset>;
  /** Create one pageHome */
  createPageHome: Maybe<PageHome>;
  /** Create one scheduledRelease */
  createScheduledRelease: Maybe<ScheduledRelease>;
  /** Delete one asset from _all_ existing stages. Returns deleted document. */
  deleteAsset: Maybe<Asset>;
  /**
   * Delete many Asset documents
   * @deprecated Please use the new paginated many mutation (deleteManyAssetsConnection)
   */
  deleteManyAssets: BatchPayload;
  /** Delete many Asset documents, return deleted documents */
  deleteManyAssetsConnection: AssetConnection;
  /**
   * Delete many PageHome documents
   * @deprecated Please use the new paginated many mutation (deleteManyPageHomesConnection)
   */
  deleteManyPageHomes: BatchPayload;
  /** Delete many PageHome documents, return deleted documents */
  deleteManyPageHomesConnection: PageHomeConnection;
  /** Delete one pageHome from _all_ existing stages. Returns deleted document. */
  deletePageHome: Maybe<PageHome>;
  /** Delete and return scheduled operation */
  deleteScheduledOperation: Maybe<ScheduledOperation>;
  /** Delete one scheduledRelease from _all_ existing stages. Returns deleted document. */
  deleteScheduledRelease: Maybe<ScheduledRelease>;
  /** Publish one asset */
  publishAsset: Maybe<Asset>;
  /**
   * Publish many Asset documents
   * @deprecated Please use the new paginated many mutation (publishManyAssetsConnection)
   */
  publishManyAssets: BatchPayload;
  /** Publish many Asset documents */
  publishManyAssetsConnection: AssetConnection;
  /**
   * Publish many PageHome documents
   * @deprecated Please use the new paginated many mutation (publishManyPageHomesConnection)
   */
  publishManyPageHomes: BatchPayload;
  /** Publish many PageHome documents */
  publishManyPageHomesConnection: PageHomeConnection;
  /** Publish one pageHome */
  publishPageHome: Maybe<PageHome>;
  /** Schedule to publish one asset */
  schedulePublishAsset: Maybe<Asset>;
  /** Schedule to publish one pageHome */
  schedulePublishPageHome: Maybe<PageHome>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishAsset: Maybe<Asset>;
  /** Unpublish one pageHome from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishPageHome: Maybe<PageHome>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishAsset: Maybe<Asset>;
  /**
   * Unpublish many Asset documents
   * @deprecated Please use the new paginated many mutation (unpublishManyAssetsConnection)
   */
  unpublishManyAssets: BatchPayload;
  /** Find many Asset documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyAssetsConnection: AssetConnection;
  /**
   * Unpublish many PageHome documents
   * @deprecated Please use the new paginated many mutation (unpublishManyPageHomesConnection)
   */
  unpublishManyPageHomes: BatchPayload;
  /** Find many PageHome documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPageHomesConnection: PageHomeConnection;
  /** Unpublish one pageHome from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishPageHome: Maybe<PageHome>;
  /** Update one asset */
  updateAsset: Maybe<Asset>;
  /**
   * Update many assets
   * @deprecated Please use the new paginated many mutation (updateManyAssetsConnection)
   */
  updateManyAssets: BatchPayload;
  /** Update many Asset documents */
  updateManyAssetsConnection: AssetConnection;
  /**
   * Update many pageHomes
   * @deprecated Please use the new paginated many mutation (updateManyPageHomesConnection)
   */
  updateManyPageHomes: BatchPayload;
  /** Update many PageHome documents */
  updateManyPageHomesConnection: PageHomeConnection;
  /** Update one pageHome */
  updatePageHome: Maybe<PageHome>;
  /** Update one scheduledRelease */
  updateScheduledRelease: Maybe<ScheduledRelease>;
  /** Upsert one asset */
  upsertAsset: Maybe<Asset>;
  /** Upsert one pageHome */
  upsertPageHome: Maybe<PageHome>;
};


export type MutationCreateAssetArgs = {
  data: AssetCreateInput;
};


export type MutationCreatePageHomeArgs = {
  data: PageHomeCreateInput;
};


export type MutationCreateScheduledReleaseArgs = {
  data: ScheduledReleaseCreateInput;
};


export type MutationDeleteAssetArgs = {
  where: AssetWhereUniqueInput;
};


export type MutationDeleteManyAssetsArgs = {
  where: InputMaybe<AssetManyWhereInput>;
};


export type MutationDeleteManyAssetsConnectionArgs = {
  after: InputMaybe<Scalars['ID']['input']>;
  before: InputMaybe<Scalars['ID']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  skip: InputMaybe<Scalars['Int']['input']>;
  where: InputMaybe<AssetManyWhereInput>;
};


export type MutationDeleteManyPageHomesArgs = {
  where: InputMaybe<PageHomeManyWhereInput>;
};


export type MutationDeleteManyPageHomesConnectionArgs = {
  after: InputMaybe<Scalars['ID']['input']>;
  before: InputMaybe<Scalars['ID']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  skip: InputMaybe<Scalars['Int']['input']>;
  where: InputMaybe<PageHomeManyWhereInput>;
};


export type MutationDeletePageHomeArgs = {
  where: PageHomeWhereUniqueInput;
};


export type MutationDeleteScheduledOperationArgs = {
  where: ScheduledOperationWhereUniqueInput;
};


export type MutationDeleteScheduledReleaseArgs = {
  where: ScheduledReleaseWhereUniqueInput;
};


export type MutationPublishAssetArgs = {
  locales: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyAssetsArgs = {
  locales: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyAssetsConnectionArgs = {
  after: InputMaybe<Scalars['ID']['input']>;
  before: InputMaybe<Scalars['ID']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  skip: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyPageHomesArgs = {
  to?: Array<Stage>;
  where: InputMaybe<PageHomeManyWhereInput>;
};


export type MutationPublishManyPageHomesConnectionArgs = {
  after: InputMaybe<Scalars['ID']['input']>;
  before: InputMaybe<Scalars['ID']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last: InputMaybe<Scalars['Int']['input']>;
  skip: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where: InputMaybe<PageHomeManyWhereInput>;
};


export type MutationPublishPageHomeArgs = {
  to?: Array<Stage>;
  where: PageHomeWhereUniqueInput;
};


export type MutationSchedulePublishAssetArgs = {
  locales: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt: InputMaybe<Scalars['DateTime']['input']>;
  releaseId: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationSchedulePublishPageHomeArgs = {
  releaseAt: InputMaybe<Scalars['DateTime']['input']>;
  releaseId: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: PageHomeWhereUniqueInput;
};


export type MutationScheduleUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales: InputMaybe<Array<Locale>>;
  releaseAt: InputMaybe<Scalars['DateTime']['input']>;
  releaseId: InputMaybe<Scalars['String']['input']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: AssetWhereUniqueInput;
};


export type MutationScheduleUnpublishPageHomeArgs = {
  from?: Array<Stage>;
  releaseAt: InputMaybe<Scalars['DateTime']['input']>;
  releaseId: InputMaybe<Scalars['String']['input']>;
  where: PageHomeWhereUniqueInput;
};


export type MutationUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: AssetWhereUniqueInput;
};


export type MutationUnpublishManyAssetsArgs = {
  from?: Array<Stage>;
  locales: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: InputMaybe<AssetManyWhereInput>;
};


export type MutationUnpublishManyAssetsConnectionArgs = {
  after: InputMaybe<Scalars['ID']['input']>;
  before: InputMaybe<Scalars['ID']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales: InputMaybe<Array<Locale>>;
  skip: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: InputMaybe<AssetManyWhereInput>;
};


export type MutationUnpublishManyPageHomesArgs = {
  from?: Array<Stage>;
  where: InputMaybe<PageHomeManyWhereInput>;
};


export type MutationUnpublishManyPageHomesConnectionArgs = {
  after: InputMaybe<Scalars['ID']['input']>;
  before: InputMaybe<Scalars['ID']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last: InputMaybe<Scalars['Int']['input']>;
  skip: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where: InputMaybe<PageHomeManyWhereInput>;
};


export type MutationUnpublishPageHomeArgs = {
  from?: Array<Stage>;
  where: PageHomeWhereUniqueInput;
};


export type MutationUpdateAssetArgs = {
  data: AssetUpdateInput;
  where: AssetWhereUniqueInput;
};


export type MutationUpdateManyAssetsArgs = {
  data: AssetUpdateManyInput;
  where: InputMaybe<AssetManyWhereInput>;
};


export type MutationUpdateManyAssetsConnectionArgs = {
  after: InputMaybe<Scalars['ID']['input']>;
  before: InputMaybe<Scalars['ID']['input']>;
  data: AssetUpdateManyInput;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  skip: InputMaybe<Scalars['Int']['input']>;
  where: InputMaybe<AssetManyWhereInput>;
};


export type MutationUpdateManyPageHomesArgs = {
  data: PageHomeUpdateManyInput;
  where: InputMaybe<PageHomeManyWhereInput>;
};


export type MutationUpdateManyPageHomesConnectionArgs = {
  after: InputMaybe<Scalars['ID']['input']>;
  before: InputMaybe<Scalars['ID']['input']>;
  data: PageHomeUpdateManyInput;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  skip: InputMaybe<Scalars['Int']['input']>;
  where: InputMaybe<PageHomeManyWhereInput>;
};


export type MutationUpdatePageHomeArgs = {
  data: PageHomeUpdateInput;
  where: PageHomeWhereUniqueInput;
};


export type MutationUpdateScheduledReleaseArgs = {
  data: ScheduledReleaseUpdateInput;
  where: ScheduledReleaseWhereUniqueInput;
};


export type MutationUpsertAssetArgs = {
  upsert: AssetUpsertInput;
  where: AssetWhereUniqueInput;
};


export type MutationUpsertPageHomeArgs = {
  upsert: PageHomeUpsertInput;
  where: PageHomeWhereUniqueInput;
};

/** An object with an ID */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID']['output'];
  /** The Stage of an object */
  stage: Stage;
};

export type PageHome = Node & {
  brands: Array<Scalars['String']['output']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<PageHome>;
  experience: Array<Experience>;
  /** List of PageHome versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  introContent: Maybe<RichText>;
  introHeading: Maybe<Scalars['String']['output']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy: Maybe<User>;
  recommendations: Array<Recommedation>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy: Maybe<User>;
};


export type PageHomeCreatedByArgs = {
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  locales: InputMaybe<Array<Locale>>;
};


export type PageHomeDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type PageHomeExperienceArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales: InputMaybe<Array<Locale>>;
  orderBy: InputMaybe<ExperienceOrderByInput>;
  skip: InputMaybe<Scalars['Int']['input']>;
  where: InputMaybe<ExperienceWhereInput>;
};


export type PageHomeHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride: InputMaybe<Stage>;
};


export type PageHomePublishedByArgs = {
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  locales: InputMaybe<Array<Locale>>;
};


export type PageHomeRecommendationsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales: InputMaybe<Array<Locale>>;
  orderBy: InputMaybe<RecommedationOrderByInput>;
  skip: InputMaybe<Scalars['Int']['input']>;
  where: InputMaybe<RecommedationWhereInput>;
};


export type PageHomeScheduledInArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales: InputMaybe<Array<Locale>>;
  skip: InputMaybe<Scalars['Int']['input']>;
  where: InputMaybe<ScheduledOperationWhereInput>;
};


export type PageHomeUpdatedByArgs = {
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  locales: InputMaybe<Array<Locale>>;
};

export type PageHomeConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PageHomeWhereUniqueInput;
};

/** A connection to a list of items. */
export type PageHomeConnection = {
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PageHomeEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PageHomeCreateInput = {
  brands: InputMaybe<Array<Scalars['String']['input']>>;
  createdAt: InputMaybe<Scalars['DateTime']['input']>;
  experience: InputMaybe<ExperienceCreateManyInlineInput>;
  introContent: InputMaybe<Scalars['RichTextAST']['input']>;
  introHeading: InputMaybe<Scalars['String']['input']>;
  recommendations: InputMaybe<RecommedationCreateManyInlineInput>;
  updatedAt: InputMaybe<Scalars['DateTime']['input']>;
};

export type PageHomeCreateManyInlineInput = {
  /** Connect multiple existing PageHome documents */
  connect: InputMaybe<Array<PageHomeWhereUniqueInput>>;
  /** Create and connect multiple existing PageHome documents */
  create: InputMaybe<Array<PageHomeCreateInput>>;
};

export type PageHomeCreateOneInlineInput = {
  /** Connect one existing PageHome document */
  connect: InputMaybe<PageHomeWhereUniqueInput>;
  /** Create and connect one PageHome document */
  create: InputMaybe<PageHomeCreateInput>;
};

/** An edge in a connection. */
export type PageHomeEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: PageHome;
};

/** Identifies documents */
export type PageHomeManyWhereInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<PageHomeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<PageHomeWhereInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<PageHomeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search: InputMaybe<Scalars['String']['input']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  brands: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  brands_contains_all: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  brands_contains_none: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  brands_contains_some: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  brands_not: InputMaybe<Array<Scalars['String']['input']>>;
  createdAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy: InputMaybe<UserWhereInput>;
  documentInStages_every: InputMaybe<PageHomeWhereStageInput>;
  documentInStages_none: InputMaybe<PageHomeWhereStageInput>;
  documentInStages_some: InputMaybe<PageHomeWhereStageInput>;
  experience_every: InputMaybe<ExperienceWhereInput>;
  experience_none: InputMaybe<ExperienceWhereInput>;
  experience_some: InputMaybe<ExperienceWhereInput>;
  id: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with: InputMaybe<Scalars['ID']['input']>;
  introHeading: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  introHeading_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  introHeading_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  introHeading_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  introHeading_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  introHeading_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  introHeading_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  introHeading_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  introHeading_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  introHeading_starts_with: InputMaybe<Scalars['String']['input']>;
  publishedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy: InputMaybe<UserWhereInput>;
  recommendations_every: InputMaybe<RecommedationWhereInput>;
  recommendations_none: InputMaybe<RecommedationWhereInput>;
  recommendations_some: InputMaybe<RecommedationWhereInput>;
  scheduledIn_every: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy: InputMaybe<UserWhereInput>;
};

export enum PageHomeOrderByInput {
  BrandsAsc = 'brands_ASC',
  BrandsDesc = 'brands_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IntroHeadingAsc = 'introHeading_ASC',
  IntroHeadingDesc = 'introHeading_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PageHomeUpdateInput = {
  brands: InputMaybe<Array<Scalars['String']['input']>>;
  experience: InputMaybe<ExperienceUpdateManyInlineInput>;
  introContent: InputMaybe<Scalars['RichTextAST']['input']>;
  introHeading: InputMaybe<Scalars['String']['input']>;
  recommendations: InputMaybe<RecommedationUpdateManyInlineInput>;
};

export type PageHomeUpdateManyInlineInput = {
  /** Connect multiple existing PageHome documents */
  connect: InputMaybe<Array<PageHomeConnectInput>>;
  /** Create and connect multiple PageHome documents */
  create: InputMaybe<Array<PageHomeCreateInput>>;
  /** Delete multiple PageHome documents */
  delete: InputMaybe<Array<PageHomeWhereUniqueInput>>;
  /** Disconnect multiple PageHome documents */
  disconnect: InputMaybe<Array<PageHomeWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing PageHome documents */
  set: InputMaybe<Array<PageHomeWhereUniqueInput>>;
  /** Update multiple PageHome documents */
  update: InputMaybe<Array<PageHomeUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PageHome documents */
  upsert: InputMaybe<Array<PageHomeUpsertWithNestedWhereUniqueInput>>;
};

export type PageHomeUpdateManyInput = {
  brands: InputMaybe<Array<Scalars['String']['input']>>;
  introContent: InputMaybe<Scalars['RichTextAST']['input']>;
  introHeading: InputMaybe<Scalars['String']['input']>;
};

export type PageHomeUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PageHomeUpdateManyInput;
  /** Document search */
  where: PageHomeWhereInput;
};

export type PageHomeUpdateOneInlineInput = {
  /** Connect existing PageHome document */
  connect: InputMaybe<PageHomeWhereUniqueInput>;
  /** Create and connect one PageHome document */
  create: InputMaybe<PageHomeCreateInput>;
  /** Delete currently connected PageHome document */
  delete: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected PageHome document */
  disconnect: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single PageHome document */
  update: InputMaybe<PageHomeUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageHome document */
  upsert: InputMaybe<PageHomeUpsertWithNestedWhereUniqueInput>;
};

export type PageHomeUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PageHomeUpdateInput;
  /** Unique document search */
  where: PageHomeWhereUniqueInput;
};

export type PageHomeUpsertInput = {
  /** Create document if it didn't exist */
  create: PageHomeCreateInput;
  /** Update document if it exists */
  update: PageHomeUpdateInput;
};

export type PageHomeUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PageHomeUpsertInput;
  /** Unique document search */
  where: PageHomeWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type PageHomeWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type PageHomeWhereInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<PageHomeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<PageHomeWhereInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<PageHomeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search: InputMaybe<Scalars['String']['input']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  brands: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  brands_contains_all: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  brands_contains_none: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  brands_contains_some: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  brands_not: InputMaybe<Array<Scalars['String']['input']>>;
  createdAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy: InputMaybe<UserWhereInput>;
  documentInStages_every: InputMaybe<PageHomeWhereStageInput>;
  documentInStages_none: InputMaybe<PageHomeWhereStageInput>;
  documentInStages_some: InputMaybe<PageHomeWhereStageInput>;
  experience_every: InputMaybe<ExperienceWhereInput>;
  experience_none: InputMaybe<ExperienceWhereInput>;
  experience_some: InputMaybe<ExperienceWhereInput>;
  id: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with: InputMaybe<Scalars['ID']['input']>;
  introHeading: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  introHeading_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  introHeading_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  introHeading_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  introHeading_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  introHeading_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  introHeading_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  introHeading_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  introHeading_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  introHeading_starts_with: InputMaybe<Scalars['String']['input']>;
  publishedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy: InputMaybe<UserWhereInput>;
  recommendations_every: InputMaybe<RecommedationWhereInput>;
  recommendations_none: InputMaybe<RecommedationWhereInput>;
  recommendations_some: InputMaybe<RecommedationWhereInput>;
  scheduledIn_every: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type PageHomeWhereStageInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<PageHomeWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<PageHomeWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<PageHomeWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent: InputMaybe<PageHomeWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage: InputMaybe<Stage>;
};

/** References PageHome record uniquely */
export type PageHomeWhereUniqueInput = {
  id: InputMaybe<Scalars['ID']['input']>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Number of items in the current page. */
  pageSize: Maybe<Scalars['Int']['output']>;
  /** When paginating backwards, the cursor to continue. */
  startCursor: Maybe<Scalars['String']['output']>;
};

export type PublishLocaleInput = {
  /** Locales to publish */
  locale: Locale;
  /** Stages to publish selected locales to */
  stages: Array<Stage>;
};

export type Query = {
  /** Retrieve a single asset */
  asset: Maybe<Asset>;
  /** Retrieve document version */
  assetVersion: Maybe<DocumentVersion>;
  /** Retrieve multiple assets */
  assets: Array<Asset>;
  /** Retrieve multiple assets using the Relay connection interface */
  assetsConnection: AssetConnection;
  /** Fetches an object given its ID */
  node: Maybe<Node>;
  /** Retrieve a single pageHome */
  pageHome: Maybe<PageHome>;
  /** Retrieve document version */
  pageHomeVersion: Maybe<DocumentVersion>;
  /** Retrieve multiple pageHomes */
  pageHomes: Array<PageHome>;
  /** Retrieve multiple pageHomes using the Relay connection interface */
  pageHomesConnection: PageHomeConnection;
  /** Retrieve a single scheduledOperation */
  scheduledOperation: Maybe<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations */
  scheduledOperations: Array<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations using the Relay connection interface */
  scheduledOperationsConnection: ScheduledOperationConnection;
  /** Retrieve a single scheduledRelease */
  scheduledRelease: Maybe<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases */
  scheduledReleases: Array<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases using the Relay connection interface */
  scheduledReleasesConnection: ScheduledReleaseConnection;
  /** Retrieve a single user */
  user: Maybe<User>;
  /** Retrieve multiple users */
  users: Array<User>;
  /** Retrieve multiple users using the Relay connection interface */
  usersConnection: UserConnection;
};


export type QueryAssetArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: AssetWhereUniqueInput;
};


export type QueryAssetVersionArgs = {
  where: VersionWhereInput;
};


export type QueryAssetsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy: InputMaybe<AssetOrderByInput>;
  skip: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where: InputMaybe<AssetWhereInput>;
};


export type QueryAssetsConnectionArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy: InputMaybe<AssetOrderByInput>;
  skip: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where: InputMaybe<AssetWhereInput>;
};


export type QueryNodeArgs = {
  id: Scalars['ID']['input'];
  locales?: Array<Locale>;
  stage?: Stage;
};


export type QueryPageHomeArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: PageHomeWhereUniqueInput;
};


export type QueryPageHomeVersionArgs = {
  where: VersionWhereInput;
};


export type QueryPageHomesArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy: InputMaybe<PageHomeOrderByInput>;
  skip: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where: InputMaybe<PageHomeWhereInput>;
};


export type QueryPageHomesConnectionArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy: InputMaybe<PageHomeOrderByInput>;
  skip: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where: InputMaybe<PageHomeWhereInput>;
};


export type QueryScheduledOperationArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledOperationWhereUniqueInput;
};


export type QueryScheduledOperationsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy: InputMaybe<ScheduledOperationOrderByInput>;
  skip: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where: InputMaybe<ScheduledOperationWhereInput>;
};


export type QueryScheduledOperationsConnectionArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy: InputMaybe<ScheduledOperationOrderByInput>;
  skip: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where: InputMaybe<ScheduledOperationWhereInput>;
};


export type QueryScheduledReleaseArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledReleaseWhereUniqueInput;
};


export type QueryScheduledReleasesArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy: InputMaybe<ScheduledReleaseOrderByInput>;
  skip: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where: InputMaybe<ScheduledReleaseWhereInput>;
};


export type QueryScheduledReleasesConnectionArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy: InputMaybe<ScheduledReleaseOrderByInput>;
  skip: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where: InputMaybe<ScheduledReleaseWhereInput>;
};


export type QueryUserArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: UserWhereUniqueInput;
};


export type QueryUsersArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy: InputMaybe<UserOrderByInput>;
  skip: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where: InputMaybe<UserWhereInput>;
};


export type QueryUsersConnectionArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy: InputMaybe<UserOrderByInput>;
  skip: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where: InputMaybe<UserWhereInput>;
};

/** Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type Rgba = {
  a: Scalars['RGBATransparency']['output'];
  b: Scalars['RGBAHue']['output'];
  g: Scalars['RGBAHue']['output'];
  r: Scalars['RGBAHue']['output'];
};

/** Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type RgbaInput = {
  a: Scalars['RGBATransparency']['input'];
  b: Scalars['RGBAHue']['input'];
  g: Scalars['RGBAHue']['input'];
  r: Scalars['RGBAHue']['input'];
};

export type Recommedation = {
  content: RichText;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  title: Maybe<Scalars['String']['output']>;
};

export type RecommedationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: RecommedationWhereUniqueInput;
};

/** A connection to a list of items. */
export type RecommedationConnection = {
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<RecommedationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type RecommedationCreateInput = {
  content: Scalars['RichTextAST']['input'];
  name: Scalars['String']['input'];
  title: InputMaybe<Scalars['String']['input']>;
};

export type RecommedationCreateManyInlineInput = {
  /** Create and connect multiple existing Recommedation documents */
  create: InputMaybe<Array<RecommedationCreateInput>>;
};

export type RecommedationCreateOneInlineInput = {
  /** Create and connect one Recommedation document */
  create: InputMaybe<RecommedationCreateInput>;
};

export type RecommedationCreateWithPositionInput = {
  /** Document to create */
  data: RecommedationCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type RecommedationEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Recommedation;
};

/** Identifies documents */
export type RecommedationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<RecommedationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<RecommedationWhereInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<RecommedationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search: InputMaybe<Scalars['String']['input']>;
  id: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with: InputMaybe<Scalars['ID']['input']>;
  name: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with: InputMaybe<Scalars['String']['input']>;
  title: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with: InputMaybe<Scalars['String']['input']>;
};

export enum RecommedationOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type RecommedationParent = PageHome;

export type RecommedationParentConnectInput = {
  PageHome: InputMaybe<PageHomeConnectInput>;
};

export type RecommedationParentCreateInput = {
  PageHome: InputMaybe<PageHomeCreateInput>;
};

export type RecommedationParentCreateManyInlineInput = {
  /** Connect multiple existing RecommedationParent documents */
  connect: InputMaybe<Array<RecommedationParentWhereUniqueInput>>;
  /** Create and connect multiple existing RecommedationParent documents */
  create: InputMaybe<Array<RecommedationParentCreateInput>>;
};

export type RecommedationParentCreateOneInlineInput = {
  /** Connect one existing RecommedationParent document */
  connect: InputMaybe<RecommedationParentWhereUniqueInput>;
  /** Create and connect one RecommedationParent document */
  create: InputMaybe<RecommedationParentCreateInput>;
};

export type RecommedationParentUpdateInput = {
  PageHome: InputMaybe<PageHomeUpdateInput>;
};

export type RecommedationParentUpdateManyInlineInput = {
  /** Connect multiple existing RecommedationParent documents */
  connect: InputMaybe<Array<RecommedationParentConnectInput>>;
  /** Create and connect multiple RecommedationParent documents */
  create: InputMaybe<Array<RecommedationParentCreateInput>>;
  /** Delete multiple RecommedationParent documents */
  delete: InputMaybe<Array<RecommedationParentWhereUniqueInput>>;
  /** Disconnect multiple RecommedationParent documents */
  disconnect: InputMaybe<Array<RecommedationParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing RecommedationParent documents */
  set: InputMaybe<Array<RecommedationParentWhereUniqueInput>>;
  /** Update multiple RecommedationParent documents */
  update: InputMaybe<Array<RecommedationParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RecommedationParent documents */
  upsert: InputMaybe<Array<RecommedationParentUpsertWithNestedWhereUniqueInput>>;
};

export type RecommedationParentUpdateManyWithNestedWhereInput = {
  PageHome: InputMaybe<PageHomeUpdateManyWithNestedWhereInput>;
};

export type RecommedationParentUpdateOneInlineInput = {
  /** Connect existing RecommedationParent document */
  connect: InputMaybe<RecommedationParentWhereUniqueInput>;
  /** Create and connect one RecommedationParent document */
  create: InputMaybe<RecommedationParentCreateInput>;
  /** Delete currently connected RecommedationParent document */
  delete: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected RecommedationParent document */
  disconnect: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single RecommedationParent document */
  update: InputMaybe<RecommedationParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RecommedationParent document */
  upsert: InputMaybe<RecommedationParentUpsertWithNestedWhereUniqueInput>;
};

export type RecommedationParentUpdateWithNestedWhereUniqueInput = {
  PageHome: InputMaybe<PageHomeUpdateWithNestedWhereUniqueInput>;
};

export type RecommedationParentUpsertWithNestedWhereUniqueInput = {
  PageHome: InputMaybe<PageHomeUpsertWithNestedWhereUniqueInput>;
};

export type RecommedationParentWhereInput = {
  PageHome: InputMaybe<PageHomeWhereInput>;
};

export type RecommedationParentWhereUniqueInput = {
  PageHome: InputMaybe<PageHomeWhereUniqueInput>;
};

export type RecommedationUpdateInput = {
  content: InputMaybe<Scalars['RichTextAST']['input']>;
  name: InputMaybe<Scalars['String']['input']>;
  title: InputMaybe<Scalars['String']['input']>;
};

export type RecommedationUpdateManyInlineInput = {
  /** Create and connect multiple Recommedation component instances */
  create: InputMaybe<Array<RecommedationCreateWithPositionInput>>;
  /** Delete multiple Recommedation documents */
  delete: InputMaybe<Array<RecommedationWhereUniqueInput>>;
  /** Update multiple Recommedation component instances */
  update: InputMaybe<Array<RecommedationUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Recommedation component instances */
  upsert: InputMaybe<Array<RecommedationUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type RecommedationUpdateManyInput = {
  content: InputMaybe<Scalars['RichTextAST']['input']>;
  name: InputMaybe<Scalars['String']['input']>;
  title: InputMaybe<Scalars['String']['input']>;
};

export type RecommedationUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RecommedationUpdateManyInput;
  /** Document search */
  where: RecommedationWhereInput;
};

export type RecommedationUpdateOneInlineInput = {
  /** Create and connect one Recommedation document */
  create: InputMaybe<RecommedationCreateInput>;
  /** Delete currently connected Recommedation document */
  delete: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Recommedation document */
  update: InputMaybe<RecommedationUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Recommedation document */
  upsert: InputMaybe<RecommedationUpsertWithNestedWhereUniqueInput>;
};

export type RecommedationUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data: InputMaybe<RecommedationUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: RecommedationWhereUniqueInput;
};

export type RecommedationUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RecommedationUpdateInput;
  /** Unique document search */
  where: RecommedationWhereUniqueInput;
};

export type RecommedationUpsertInput = {
  /** Create document if it didn't exist */
  create: RecommedationCreateInput;
  /** Update document if it exists */
  update: RecommedationUpdateInput;
};

export type RecommedationUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data: InputMaybe<RecommedationUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: RecommedationWhereUniqueInput;
};

export type RecommedationUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RecommedationUpsertInput;
  /** Unique document search */
  where: RecommedationWhereUniqueInput;
};

/** Identifies documents */
export type RecommedationWhereInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<RecommedationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<RecommedationWhereInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<RecommedationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search: InputMaybe<Scalars['String']['input']>;
  id: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with: InputMaybe<Scalars['ID']['input']>;
  name: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with: InputMaybe<Scalars['String']['input']>;
  title: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with: InputMaybe<Scalars['String']['input']>;
};

/** References Recommedation record uniquely */
export type RecommedationWhereUniqueInput = {
  id: InputMaybe<Scalars['ID']['input']>;
};

/** Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values */
export type RichText = {
  /** Returns HTMl representation */
  html: Scalars['String']['output'];
  /** Returns Markdown representation */
  markdown: Scalars['String']['output'];
  /** Returns AST representation */
  raw: Scalars['RichTextAST']['output'];
  /** Returns plain-text contents of RichText */
  text: Scalars['String']['output'];
};

/** Scheduled Operation system model */
export type ScheduledOperation = Node & {
  affectedDocuments: Array<ScheduledOperationAffectedDocument>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy: Maybe<User>;
  /** Operation description */
  description: Maybe<Scalars['String']['output']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledOperation>;
  /** Operation error message */
  errorMessage: Maybe<Scalars['String']['output']>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy: Maybe<User>;
  /** Raw operation payload including all details, this field is subject to change */
  rawPayload: Scalars['Json']['output'];
  /** The release this operation is scheduled for */
  release: Maybe<ScheduledRelease>;
  /** System stage field */
  stage: Stage;
  /** operation Status */
  status: ScheduledOperationStatus;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy: Maybe<User>;
};


/** Scheduled Operation system model */
export type ScheduledOperationAffectedDocumentsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales: InputMaybe<Array<Locale>>;
  skip: InputMaybe<Scalars['Int']['input']>;
};


/** Scheduled Operation system model */
export type ScheduledOperationCreatedByArgs = {
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  locales: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


/** Scheduled Operation system model */
export type ScheduledOperationPublishedByArgs = {
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  locales: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationReleaseArgs = {
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  locales: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationUpdatedByArgs = {
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  locales: InputMaybe<Array<Locale>>;
};

export type ScheduledOperationAffectedDocument = Asset | PageHome;

export type ScheduledOperationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledOperationWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledOperationConnection = {
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledOperationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledOperationCreateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationCreateOneInlineInput = {
  /** Connect one existing ScheduledOperation document */
  connect: InputMaybe<ScheduledOperationWhereUniqueInput>;
};

/** An edge in a connection. */
export type ScheduledOperationEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: ScheduledOperation;
};

/** Identifies documents */
export type ScheduledOperationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search: InputMaybe<Scalars['String']['input']>;
  createdAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy: InputMaybe<UserWhereInput>;
  description: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with: InputMaybe<Scalars['String']['input']>;
  errorMessage: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  errorMessage_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  errorMessage_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  errorMessage_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  errorMessage_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  errorMessage_starts_with: InputMaybe<Scalars['String']['input']>;
  id: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with: InputMaybe<Scalars['ID']['input']>;
  publishedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy: InputMaybe<UserWhereInput>;
  /** All values containing the given json path. */
  rawPayload_json_path_exists: InputMaybe<Scalars['String']['input']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  rawPayload_value_recursive: InputMaybe<Scalars['Json']['input']>;
  release: InputMaybe<ScheduledReleaseWhereInput>;
  status: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy: InputMaybe<UserWhereInput>;
};

export enum ScheduledOperationOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Operation Status */
export enum ScheduledOperationStatus {
  Canceled = 'CANCELED',
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export type ScheduledOperationUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect: InputMaybe<Array<ScheduledOperationConnectInput>>;
  /** Disconnect multiple ScheduledOperation documents */
  disconnect: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledOperation documents */
  set: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationUpdateOneInlineInput = {
  /** Connect existing ScheduledOperation document */
  connect: InputMaybe<ScheduledOperationWhereUniqueInput>;
  /** Disconnect currently connected ScheduledOperation document */
  disconnect: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type ScheduledOperationWhereInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search: InputMaybe<Scalars['String']['input']>;
  createdAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy: InputMaybe<UserWhereInput>;
  description: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with: InputMaybe<Scalars['String']['input']>;
  errorMessage: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  errorMessage_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  errorMessage_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  errorMessage_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  errorMessage_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  errorMessage_starts_with: InputMaybe<Scalars['String']['input']>;
  id: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with: InputMaybe<Scalars['ID']['input']>;
  publishedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy: InputMaybe<UserWhereInput>;
  /** All values containing the given json path. */
  rawPayload_json_path_exists: InputMaybe<Scalars['String']['input']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  rawPayload_value_recursive: InputMaybe<Scalars['Json']['input']>;
  release: InputMaybe<ScheduledReleaseWhereInput>;
  status: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy: InputMaybe<UserWhereInput>;
};

/** References ScheduledOperation record uniquely */
export type ScheduledOperationWhereUniqueInput = {
  id: InputMaybe<Scalars['ID']['input']>;
};

/** Scheduled Release system model */
export type ScheduledRelease = Node & {
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy: Maybe<User>;
  /** Release description */
  description: Maybe<Scalars['String']['output']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledRelease>;
  /** Release error message */
  errorMessage: Maybe<Scalars['String']['output']>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** Whether scheduled release should be run */
  isActive: Scalars['Boolean']['output'];
  /** Whether scheduled release is implicit */
  isImplicit: Scalars['Boolean']['output'];
  /** Operations to run with this release */
  operations: Array<ScheduledOperation>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy: Maybe<User>;
  /** Release date and time */
  releaseAt: Maybe<Scalars['DateTime']['output']>;
  /** System stage field */
  stage: Stage;
  /** Release Status */
  status: ScheduledReleaseStatus;
  /** Release Title */
  title: Maybe<Scalars['String']['output']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy: Maybe<User>;
};


/** Scheduled Release system model */
export type ScheduledReleaseCreatedByArgs = {
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  locales: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


/** Scheduled Release system model */
export type ScheduledReleaseOperationsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  locales: InputMaybe<Array<Locale>>;
  orderBy: InputMaybe<ScheduledOperationOrderByInput>;
  skip: InputMaybe<Scalars['Int']['input']>;
  where: InputMaybe<ScheduledOperationWhereInput>;
};


/** Scheduled Release system model */
export type ScheduledReleasePublishedByArgs = {
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  locales: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseUpdatedByArgs = {
  forceParentLocale: InputMaybe<Scalars['Boolean']['input']>;
  locales: InputMaybe<Array<Locale>>;
};

export type ScheduledReleaseConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledReleaseWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledReleaseConnection = {
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledReleaseEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledReleaseCreateInput = {
  createdAt: InputMaybe<Scalars['DateTime']['input']>;
  description: InputMaybe<Scalars['String']['input']>;
  errorMessage: InputMaybe<Scalars['String']['input']>;
  isActive: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt: InputMaybe<Scalars['DateTime']['input']>;
  title: InputMaybe<Scalars['String']['input']>;
  updatedAt: InputMaybe<Scalars['DateTime']['input']>;
};

export type ScheduledReleaseCreateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Create and connect multiple existing ScheduledRelease documents */
  create: InputMaybe<Array<ScheduledReleaseCreateInput>>;
};

export type ScheduledReleaseCreateOneInlineInput = {
  /** Connect one existing ScheduledRelease document */
  connect: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create: InputMaybe<ScheduledReleaseCreateInput>;
};

/** An edge in a connection. */
export type ScheduledReleaseEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: ScheduledRelease;
};

/** Identifies documents */
export type ScheduledReleaseManyWhereInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search: InputMaybe<Scalars['String']['input']>;
  createdAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy: InputMaybe<UserWhereInput>;
  description: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with: InputMaybe<Scalars['String']['input']>;
  errorMessage: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  errorMessage_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  errorMessage_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  errorMessage_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  errorMessage_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  errorMessage_starts_with: InputMaybe<Scalars['String']['input']>;
  id: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with: InputMaybe<Scalars['ID']['input']>;
  isActive: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not: InputMaybe<Scalars['Boolean']['input']>;
  isImplicit: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isImplicit_not: InputMaybe<Scalars['Boolean']['input']>;
  operations_every: InputMaybe<ScheduledOperationWhereInput>;
  operations_none: InputMaybe<ScheduledOperationWhereInput>;
  operations_some: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy: InputMaybe<UserWhereInput>;
  releaseAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  releaseAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  releaseAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  releaseAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  releaseAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  releaseAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  status: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with: InputMaybe<Scalars['String']['input']>;
  updatedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy: InputMaybe<UserWhereInput>;
};

export enum ScheduledReleaseOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  IsImplicitAsc = 'isImplicit_ASC',
  IsImplicitDesc = 'isImplicit_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ReleaseAtAsc = 'releaseAt_ASC',
  ReleaseAtDesc = 'releaseAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Release Status */
export enum ScheduledReleaseStatus {
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export type ScheduledReleaseUpdateInput = {
  description: InputMaybe<Scalars['String']['input']>;
  errorMessage: InputMaybe<Scalars['String']['input']>;
  isActive: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt: InputMaybe<Scalars['DateTime']['input']>;
  title: InputMaybe<Scalars['String']['input']>;
};

export type ScheduledReleaseUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect: InputMaybe<Array<ScheduledReleaseConnectInput>>;
  /** Create and connect multiple ScheduledRelease documents */
  create: InputMaybe<Array<ScheduledReleaseCreateInput>>;
  /** Delete multiple ScheduledRelease documents */
  delete: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Disconnect multiple ScheduledRelease documents */
  disconnect: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledRelease documents */
  set: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Update multiple ScheduledRelease documents */
  update: InputMaybe<Array<ScheduledReleaseUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ScheduledRelease documents */
  upsert: InputMaybe<Array<ScheduledReleaseUpsertWithNestedWhereUniqueInput>>;
};

export type ScheduledReleaseUpdateManyInput = {
  description: InputMaybe<Scalars['String']['input']>;
  errorMessage: InputMaybe<Scalars['String']['input']>;
  isActive: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt: InputMaybe<Scalars['DateTime']['input']>;
  title: InputMaybe<Scalars['String']['input']>;
};

export type ScheduledReleaseUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ScheduledReleaseUpdateManyInput;
  /** Document search */
  where: ScheduledReleaseWhereInput;
};

export type ScheduledReleaseUpdateOneInlineInput = {
  /** Connect existing ScheduledRelease document */
  connect: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create: InputMaybe<ScheduledReleaseCreateInput>;
  /** Delete currently connected ScheduledRelease document */
  delete: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected ScheduledRelease document */
  disconnect: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single ScheduledRelease document */
  update: InputMaybe<ScheduledReleaseUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ScheduledRelease document */
  upsert: InputMaybe<ScheduledReleaseUpsertWithNestedWhereUniqueInput>;
};

export type ScheduledReleaseUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ScheduledReleaseUpdateInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

export type ScheduledReleaseUpsertInput = {
  /** Create document if it didn't exist */
  create: ScheduledReleaseCreateInput;
  /** Update document if it exists */
  update: ScheduledReleaseUpdateInput;
};

export type ScheduledReleaseUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ScheduledReleaseUpsertInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

/** Identifies documents */
export type ScheduledReleaseWhereInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search: InputMaybe<Scalars['String']['input']>;
  createdAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy: InputMaybe<UserWhereInput>;
  description: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with: InputMaybe<Scalars['String']['input']>;
  errorMessage: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  errorMessage_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  errorMessage_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  errorMessage_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  errorMessage_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  errorMessage_starts_with: InputMaybe<Scalars['String']['input']>;
  id: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with: InputMaybe<Scalars['ID']['input']>;
  isActive: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not: InputMaybe<Scalars['Boolean']['input']>;
  isImplicit: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isImplicit_not: InputMaybe<Scalars['Boolean']['input']>;
  operations_every: InputMaybe<ScheduledOperationWhereInput>;
  operations_none: InputMaybe<ScheduledOperationWhereInput>;
  operations_some: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy: InputMaybe<UserWhereInput>;
  releaseAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  releaseAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  releaseAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  releaseAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  releaseAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  releaseAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  status: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with: InputMaybe<Scalars['String']['input']>;
  updatedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy: InputMaybe<UserWhereInput>;
};

/** References ScheduledRelease record uniquely */
export type ScheduledReleaseWhereUniqueInput = {
  id: InputMaybe<Scalars['ID']['input']>;
};

/** Stage system enumeration */
export enum Stage {
  /** The Draft is the default stage for all your content. */
  Draft = 'DRAFT',
  /** The Published stage is where you can publish your content to. */
  Published = 'PUBLISHED'
}

export enum SystemDateTimeFieldVariation {
  Base = 'BASE',
  Combined = 'COMBINED',
  Localization = 'LOCALIZATION'
}

export type UnpublishLocaleInput = {
  /** Locales to unpublish */
  locale: Locale;
  /** Stages to unpublish selected locales from */
  stages: Array<Stage>;
};

/** User system model */
export type User = Node & {
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** Get the document in other stages */
  documentInStages: Array<User>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** Flag to determine if user is active or not */
  isActive: Scalars['Boolean']['output'];
  /** User Kind. Can be either MEMBER, PAT or PUBLIC */
  kind: UserKind;
  /** The username */
  name: Scalars['String']['output'];
  /** Profile Picture url */
  picture: Maybe<Scalars['String']['output']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt: Maybe<Scalars['DateTime']['output']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
};


/** User system model */
export type UserDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};

export type UserConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: UserWhereUniqueInput;
};

/** A connection to a list of items. */
export type UserConnection = {
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<UserEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type UserCreateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserCreateOneInlineInput = {
  /** Connect one existing User document */
  connect: InputMaybe<UserWhereUniqueInput>;
};

/** An edge in a connection. */
export type UserEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: User;
};

/** System User Kind */
export enum UserKind {
  AppToken = 'APP_TOKEN',
  Member = 'MEMBER',
  Pat = 'PAT',
  Public = 'PUBLIC',
  Webhook = 'WEBHOOK'
}

/** Identifies documents */
export type UserManyWhereInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search: InputMaybe<Scalars['String']['input']>;
  createdAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  documentInStages_every: InputMaybe<UserWhereStageInput>;
  documentInStages_none: InputMaybe<UserWhereStageInput>;
  documentInStages_some: InputMaybe<UserWhereStageInput>;
  id: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with: InputMaybe<Scalars['ID']['input']>;
  isActive: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not: InputMaybe<Scalars['Boolean']['input']>;
  kind: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** Any other value that exists and is not equal to the given value. */
  kind_not: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in: InputMaybe<Array<InputMaybe<UserKind>>>;
  name: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with: InputMaybe<Scalars['String']['input']>;
  picture: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  picture_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  picture_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  picture_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  picture_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  picture_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  picture_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  picture_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  picture_starts_with: InputMaybe<Scalars['String']['input']>;
  publishedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
};

export enum UserOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  KindAsc = 'kind_ASC',
  KindDesc = 'kind_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PictureAsc = 'picture_ASC',
  PictureDesc = 'picture_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type UserUpdateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect: InputMaybe<Array<UserConnectInput>>;
  /** Disconnect multiple User documents */
  disconnect: InputMaybe<Array<UserWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing User documents */
  set: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserUpdateOneInlineInput = {
  /** Connect existing User document */
  connect: InputMaybe<UserWhereUniqueInput>;
  /** Disconnect currently connected User document */
  disconnect: InputMaybe<Scalars['Boolean']['input']>;
};

/** This contains a set of filters that can be used to compare values internally */
export type UserWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type UserWhereInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search: InputMaybe<Scalars['String']['input']>;
  createdAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  documentInStages_every: InputMaybe<UserWhereStageInput>;
  documentInStages_none: InputMaybe<UserWhereStageInput>;
  documentInStages_some: InputMaybe<UserWhereStageInput>;
  id: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with: InputMaybe<Scalars['ID']['input']>;
  isActive: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not: InputMaybe<Scalars['Boolean']['input']>;
  kind: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** Any other value that exists and is not equal to the given value. */
  kind_not: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in: InputMaybe<Array<InputMaybe<UserKind>>>;
  name: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with: InputMaybe<Scalars['String']['input']>;
  picture: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  picture_contains: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  picture_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  picture_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  picture_not: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  picture_not_contains: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  picture_not_ends_with: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  picture_not_in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  picture_starts_with: InputMaybe<Scalars['String']['input']>;
  publishedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedAt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type UserWhereStageInput = {
  /** Logical AND on all given filters. */
  AND: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR: InputMaybe<Array<UserWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent: InputMaybe<UserWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage: InputMaybe<Stage>;
};

/** References User record uniquely */
export type UserWhereUniqueInput = {
  id: InputMaybe<Scalars['ID']['input']>;
};

export type Version = {
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['ID']['output'];
  revision: Scalars['Int']['output'];
  stage: Stage;
};

export type VersionWhereInput = {
  id: Scalars['ID']['input'];
  revision: Scalars['Int']['input'];
  stage: Stage;
};

export enum _FilterKind {
  And = 'AND',
  Not = 'NOT',
  Or = 'OR',
  Contains = 'contains',
  ContainsAll = 'contains_all',
  ContainsNone = 'contains_none',
  ContainsSome = 'contains_some',
  EndsWith = 'ends_with',
  Eq = 'eq',
  EqNot = 'eq_not',
  Gt = 'gt',
  Gte = 'gte',
  In = 'in',
  JsonPathExists = 'json_path_exists',
  JsonValueRecursive = 'json_value_recursive',
  Lt = 'lt',
  Lte = 'lte',
  NotContains = 'not_contains',
  NotEndsWith = 'not_ends_with',
  NotIn = 'not_in',
  NotStartsWith = 'not_starts_with',
  RelationalEvery = 'relational_every',
  RelationalNone = 'relational_none',
  RelationalSingle = 'relational_single',
  RelationalSome = 'relational_some',
  Search = 'search',
  StartsWith = 'starts_with',
  UnionEmpty = 'union_empty',
  UnionEvery = 'union_every',
  UnionNone = 'union_none',
  UnionSingle = 'union_single',
  UnionSome = 'union_some'
}

export enum _MutationInputFieldKind {
  Enum = 'enum',
  Relation = 'relation',
  RichText = 'richText',
  RichTextWithEmbeds = 'richTextWithEmbeds',
  Scalar = 'scalar',
  Union = 'union',
  Virtual = 'virtual'
}

export enum _MutationKind {
  Create = 'create',
  Delete = 'delete',
  DeleteMany = 'deleteMany',
  Publish = 'publish',
  PublishMany = 'publishMany',
  SchedulePublish = 'schedulePublish',
  ScheduleUnpublish = 'scheduleUnpublish',
  Unpublish = 'unpublish',
  UnpublishMany = 'unpublishMany',
  Update = 'update',
  UpdateMany = 'updateMany',
  Upsert = 'upsert'
}

export enum _OrderDirection {
  Asc = 'asc',
  Desc = 'desc'
}

export enum _RelationInputCardinality {
  Many = 'many',
  One = 'one'
}

export enum _RelationInputKind {
  Create = 'create',
  Update = 'update'
}

export enum _RelationKind {
  Regular = 'regular',
  Union = 'union'
}

export enum _SystemDateTimeFieldVariation {
  Base = 'base',
  Combined = 'combined',
  Localization = 'localization'
}

export type PageHomeIntroQueryVariables = Exact<{ [key: string]: never; }>;


export type PageHomeIntroQuery = { pageHome: { brands: Array<string>, introHeading: string | null, introContent: { raw: any } | null } | null };

export type PageHomeContentQueryVariables = Exact<{ [key: string]: never; }>;


export type PageHomeContentQuery = { pageHome: { experience: Array<{ title: string, position: string | null, date: string | null, responsibilities: Array<string>, software: Array<string>, description: { raw: any } | null }> } | null };
